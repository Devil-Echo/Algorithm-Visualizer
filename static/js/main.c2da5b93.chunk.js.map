{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Pathfinder/Node/Node.jsx","Algorithms/Dijkstra.js","Pathfinder/Pathfinder.jsx","NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["mergesort","array","length","animations","auxiliary","slice","mergesortHelper","mainArray","startIndex","endIndex","midIndex","Math","floor","k","i","j","push","merge","maxheapify","size","root","largest","leftchild","rightchild","t","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arraybars","document","getElementsByClassName","bar1","bar2","bar1style","style","bar2style","color","setTimeout","backgroundColor","newheight","height","heapSort","a","bubblesort","newheight1","newheight2","bar1styles","bar2styles","temp","insertionSort","className","map","value","id","key","onClick","mergeSort","bubbleSort","React","Component","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","dfs","dfsHelper","adjNodes","PathfindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","animateShortestPath","getElementById","animateDijkstra","visualizeDijkstra","visualizedfs","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","NavBar","disabled","exact","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2da5b93.chunk.js","sourcesContent":["export function mergesort(array) {\n  if (array.length <= 1) return array;\n  const animations = [];\n  const auxiliary = array.slice();\n  mergesortHelper(array, 0, array.length - 1, auxiliary, animations);\n  return animations;\n}\n\nfunction mergesortHelper(\n  mainArray,\n  startIndex,\n  endIndex,\n  auxiliary,\n  animations,\n) {\n  if (startIndex === endIndex) return;\n  const midIndex = Math.floor((startIndex + endIndex) / 2);\n  mergesortHelper(auxiliary, startIndex, midIndex, mainArray, animations);\n  mergesortHelper(auxiliary, midIndex + 1, endIndex, mainArray, animations);\n  merge(mainArray, startIndex, midIndex, endIndex, auxiliary, animations);\n}\n\nfunction merge(\n  mainArray,\n  startIndex,\n  midIndex,\n  endIndex,\n  auxiliary,\n  animations,\n) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = midIndex + 1;\n  while (i <= midIndex && j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliary[i] <= auxiliary[j]) {\n      animations.push([k, auxiliary[i]]);\n      mainArray[k++] = auxiliary[i++];\n    } else {\n      animations.push([k, auxiliary[j]]);\n      mainArray[k++] = auxiliary[j++];\n    }\n  }\n  while (i <= midIndex) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliary[i]]);\n    mainArray[k++] = auxiliary[i++];\n  }\n  while (j <= endIndex) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliary[j]]);\n    mainArray[k++] = auxiliary[j++];\n  }\n}\n\nexport function bubblesort(array) {\n  const animations = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 1; j < array.length - i; j++) {\n      animations.push([j - 1, j]);\n      animations.push([j - 1, j]);\n      if (array[j] < array[j - 1]) {\n        animations.push([j - 1, array[j], j, array[j - 1]]);\n        let a = array[j - 1];\n        array[j - 1] = array[j];\n        array[j] = a;\n      } else animations.push([j - 1, array[j - 1], j, array[j]]);\n    }\n  }\n  return animations;\n}\n\nexport function insertionSort(array) {\n  const animations = [];\n  for (let i = 1; i < array.length; i++) {\n    let j = i - 1;\n    let temp = array[i];\n    while (temp < array[j] && j >= 0) {\n      array[j + 1] = array[j];\n      animations.push([j + 1, j]);\n      animations.push([j + 1, j]);\n      j--;\n    }\n\n    array[j + 1] = temp;\n  }\n  return animations;\n}\n\nexport function heapSort(array) {\n  const animations = [];\n  for (let i = Math.floor(array.length / 2) ; i >= 0; i--)\n    maxheapify(array, animations, array.length, i);\n  for (let i = array.length - 1; i > 0; i--) {\n    animations.push([0, i]);\n    animations.push([0, i]);\n    let t = array[0];\n    array[0] = array[i];\n    array[i] = t;\n    maxheapify(array, animations, i, 0);\n  }\n  return animations;\n}\n\nfunction maxheapify(array, animations, size, root) {\n  let largest = root;\n  let leftchild = 2 * root + 1;\n  let rightchild = 2 * root + 2;\n  if (leftchild < size && array[leftchild] > array[largest])\n    largest = leftchild;\n  if (rightchild < size && array[rightchild] > array[largest])\n    largest = rightchild;\n  if (largest !== root) {\n    let t = array[root];\n    array[root] = array[largest];\n    array[largest] = t;\n    animations.push([root, largest]);\n    animations.push([root, largest]);\n    maxheapify(array, animations, size, largest);\n  }\n}\n","import React from 'react';\n//import ReactDOM from 'react-dom'\nimport './SortingVisualizer.css';\nimport {\n  mergesort,\n  bubblesort,\n  insertionSort,\n  heapSort,\n} from '../SortingAlgorithms/SortingAlgorithms.js';\nconst primary_color = 'turquoise';\nconst secondary_color = 'tomato';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < 100; i++) {\n      array.push(getRandomArbitrary(5, 610));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = mergesort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arraybars = document.getElementsByClassName('bars');\n      const changecolor = i % 3 !== 2;\n      if (changecolor) {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        const color = i % 3 === 0 ? secondary_color : primary_color;\n        setTimeout(() => {\n          bar1style.backgroundColor = color;\n          bar2style.backgroundColor = color;\n        }, i * 10);\n      } else {\n        const [bar1, newheight] = animations[i];\n        setTimeout(() => {\n          const bar1styles = arraybars[bar1].style;\n          bar1styles.height = `${newheight}px`;\n        }, i * 10);\n      }\n    }\n  }\n\n  heapSort() {\n    const animations = heapSort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arraybars = document.getElementsByClassName('bars');\n      if (i % 2 === 0) {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        setTimeout(() => {\n          bar1style.backgroundColor = secondary_color;\n          bar2style.backgroundColor = secondary_color;\n          let t = bar1style.height;\n          bar1style.height = bar2style.height;\n          bar2style.height = t;\n        }, i * 10);\n      } else {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        setTimeout(() => {\n          bar1style.backgroundColor = primary_color;\n          bar2style.backgroundColor = primary_color;\n        }, i * 10);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = bubblesort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arraybars = document.getElementsByClassName('bars');\n      const changecolor = i % 3 !== 2;\n      if (changecolor) {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        const color = i % 3 === 0 ? secondary_color : primary_color;\n        setTimeout(() => {\n          bar1style.backgroundColor = color;\n          bar2style.backgroundColor = color;\n        }, i * 20);\n      } else {\n        const [bar1, newheight1, bar2, newheight2] = animations[i];\n        setTimeout(( ) => {\n          const bar1styles = arraybars[bar1].style;\n          const bar2styles = arraybars[bar2].style;\n          bar1styles.height = `${newheight1}px`;\n          bar2styles.height = `${newheight2}px`;\n        }, i * 20);\n      }\n    }\n  }\n  insertionSort() {\n    const animations = insertionSort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arraybars = document.getElementsByClassName('bars');\n      if (i % 2 === 0) {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        setTimeout(() => {\n          bar1style.backgroundColor = secondary_color;\n          bar2style.backgroundColor = secondary_color;\n          let t = bar1style.height;\n          bar1style.height = bar2style.height;\n          bar2style.height = t;\n        }, i * 10);\n      } else {\n        const [bar1, bar2] = animations[i];\n        const bar1style = arraybars[bar1].style;\n        const bar2style = arraybars[bar2].style;\n        setTimeout(() => {\n          bar1style.backgroundColor = primary_color;\n          bar2style.backgroundColor = primary_color;\n        }, i * 10);\n      }\n    }\n  }\n  render() {\n    const {array} = this.state;\n    return (\n      <div className=\"container\">\n        {array.map((value, id) => (\n          <div\n            className=\"bars\"\n            key={id}\n            style={{\n              backgroundColor: primary_color,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <div>\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <text>{'   '}</text>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <text>{'   '}</text>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <text>{'   '}</text>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort </button>\n          <text>{'   '}</text>\n          <button onClick={() => this.insertionSort()}>Insertion Sort </button>\n        </div>\n      </div>\n    );\n  }\n}\nfunction getRandomArbitrary(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","import { queryHelpers } from \"@testing-library/react\";\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue;\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n  \n\n  \n  export function dfs(grid,startNode,finishNode)\n  {\n    const visitedNodesInOrder = [];\n    dfsHelper(grid,startNode,finishNode,visitedNodesInOrder);\n    return visitedNodesInOrder;\n  }\n\n  function dfsHelper(grid,startNode,finishNode,visitedNodesInOrder)\n  {\n    const adjNodes = getUnvisitedNeighbors(startNode, grid);\n    while (!!adjNodes.length)\n    {\n       const closestNode = adjNodes.shift();\n       if(closestNode.isWall) continue;\n       if(finishNode.isVisited)\n          return;\n       visitedNodesInOrder.push(closestNode);\n       closestNode.isVisited = true;\n       if(closestNode === finishNode) return;\n       updateUnvisitedNeighbors(closestNode, grid);\n       dfsHelper(grid,closestNode,finishNode,visitedNodesInOrder);\n    }\n  }","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder, dfs} from '../Algorithms/Dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizedfs()\n  {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <button onClick={() => this.visualizedfs()}>Visualize DFS </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Router } from 'react-router-dom/cjs/react-router-dom.min';\nimport './NavBar.css';\n\n\nexport default class NavBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            disabled: false,\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                <div className=\"nav-bar\">\n                    <NavLink exact className=\"nav-link\"  to={!this.state.disabled ? '/' : \"\"}>Pathfinding Algoritms</NavLink>\n                    <NavLink exact className=\"nav-link\"  to={!this.state.disabled ? '/sortingvisualizer' : \"\"}>Sorting Algorithms</NavLink>\n                </div>\n            </>\n        );\n    }\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport PathfindingVisualizer from './Pathfinder/Pathfinder';\nimport NavBar from './NavBar';\nimport { Route, Switch, BrowserRouter } from  'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n       <NavBar />\n        <Switch>\n          <Route exact path = '/' component={PathfindingVisualizer} />\n          <Route exact path = '/sortingvisualizer' component={SortingVisualizer} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}